name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-commit validation (matches local development)
  pre-commit-checks:
    name: Pre-commit Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install tools
      run: |
        # Install Go tools
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        go install mvdan.cc/gofumpt@latest
        
        # Add Go bin to PATH
        echo "$HOME/go/bin" >> $GITHUB_PATH
        
        # Install Node.js tools
        npm install -g @apidevtools/swagger-cli
    
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
    
    - name: Verify clean workspace
      run: |
        echo "🔍 Checking workspace status..."
        if [ -n "$(git status --porcelain)" ]; then
          echo "❌ Workspace is not clean:"
          git status --porcelain
          echo "This may indicate an issue with the repository state"
        else
          echo "✅ Workspace is clean"
        fi
    
    - name: Run pre-commit checks
      run: |
        echo "🔍 Running pre-commit validation..."
        if ! ./scripts/pre-commit-checks.sh; then
          echo ""
          echo "❌ Pre-commit checks failed. Debugging information:"
          echo "📋 Go version: $(go version)"
          echo "📋 Git status:"
          git status --porcelain || true
          echo "📋 Go modules status:"
          go mod verify || true
          go mod tidy -diff || true
          echo "📋 Available tools:"
          echo "   golangci-lint: $(command -v golangci-lint && golangci-lint version || echo 'not found')"
          echo "   gosec: $(command -v gosec && gosec -version || echo 'not found')"
          echo "   swagger-cli: $(command -v swagger-cli && swagger-cli --version || echo 'not found')"
          exit 1
        fi

  # Code quality and security checks
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install gofumpt
      run: |
        go install mvdan.cc/gofumpt@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH
    
    - name: Check Go formatting
      run: |
        echo "🎨 Checking Go formatting..."
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ The following files are not properly formatted with gofmt:"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ gofmt formatting check passed"
        
        # Also check gofumpt formatting (matches local Makefile)
        if [ "$(gofumpt -l . | wc -l)" -gt 0 ]; then
          echo "❌ The following files are not properly formatted with gofumpt:"
          gofumpt -l .
          echo "Run 'make fmt' locally to fix formatting issues"
          exit 1
        fi
        echo "✅ gofumpt formatting check passed"
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.61.0
        args: --no-config --timeout=5m

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'
    
    - name: Run Gosec for JSON report
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt json -out gosec-report.json ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      if: always()
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: gosec-report
        path: gosec-report.json
      if: always()

  # Unit and integration tests
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: |
        echo "📦 Downloading dependencies..."
        go mod download
        go mod verify
        echo "✅ Dependencies ready"
    
    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./internal/... ./pkg/...
        echo "✅ Unit tests completed"
    
    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "📊 Test coverage: ${COVERAGE}%"
        # Use awk for floating point comparison - same threshold as Makefile (78%)
        if awk "BEGIN {exit !(${COVERAGE} < 78)}"; then
          echo "❌ Coverage ${COVERAGE}% is below threshold 78%"
          exit 1
        fi
        echo "✅ Coverage threshold met: ${COVERAGE}% >= 78%"
        
        # Generate HTML coverage report (matches Makefile)
        go tool cover -html=coverage.out -o coverage.html
        echo "✅ Coverage report generated"
    
    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379
      run: |
        echo "🔗 Running integration tests..."
        go test -v -tags=integration ./tests/integration_test.go
        echo "✅ Integration tests completed"
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
      if: always()
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      if: always()

  # API validation
  validate-api:
    name: Validate API
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install OpenAPI tools
      run: |
        npm install -g @apidevtools/swagger-cli
        go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest
    
    - name: Validate OpenAPI specification
      run: |
        echo "🔍 Validating OpenAPI specification..."
        swagger-cli validate api/openapi.yml
        echo "✅ OpenAPI specification is valid"
    
    - name: Build validation tool
      run: |
        echo "🔨 Building API validation tool..."
        go build -o validate-api ./cmd/validate-api
        echo "✅ Validation tool built"
    
    - name: Run API validation
      run: |
        echo "🔍 Validating API implementation..."
        ./validate-api --spec=api/openapi.yml
        echo "✅ API implementation validated"

  # Build and test Docker image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [pre-commit-checks, lint-and-format, test, validate-api]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: dev-utilities:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
    
    - name: Test Docker image
      run: |
        echo "🐳 Testing Docker container..."
        
        # Verify image exists
        docker images | grep dev-utilities || (echo "❌ Image not found!" && exit 1)
        echo "✅ Docker image found"
        
        # Start container in background
        docker run -d --name test-container -p 8080:8080 dev-utilities:test
        echo "✅ Container started"
        
        # Wait for container to be ready with retry logic
        echo "⏳ Waiting for container to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ Container is ready!"
            break
          fi
          echo "Attempt $i/30: Container not ready yet, waiting..."
          sleep 2
          if [ $i -eq 30 ]; then
            echo "❌ Container failed to become ready"
            echo "Container logs:"
            docker logs test-container
            docker stop test-container
            docker rm test-container
            exit 1
          fi
        done
        
        # Test health endpoint
        echo "🏥 Testing health endpoint..."
        curl -f http://localhost:8080/health || (echo "❌ Health check failed" && docker logs test-container && docker stop test-container && docker rm test-container && exit 1)
        echo "✅ Health check passed"
        
        # Test API endpoint
        echo "🧪 Testing API endpoint..."
        curl -f -X POST http://localhost:8080/api/v1/crypto/hash \
          -H "Content-Type: application/json" \
          -d '{"content": "test", "algorithm": "sha256"}' || (echo "❌ API test failed" && docker logs test-container && docker stop test-container && docker rm test-container && exit 1)
        echo "✅ API test passed"
        
        # Stop and remove container
        docker stop test-container
        docker rm test-container
        echo "✅ Docker container test completed successfully"

  # End-to-end tests
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Ensure Docker Compose is available
      run: |
        if command -v docker-compose >/dev/null 2>&1; then
          echo "✅ docker-compose is available"
          docker-compose version
        elif docker compose version >/dev/null 2>&1; then
          echo "✅ docker compose is available"
          docker compose version
        else
          echo "⚠️  Installing docker-compose..."
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
        fi
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: dev-utilities:e2e
        cache-from: type=gha
        load: true
    
    - name: Run E2E tests with Docker Compose (with fallback)
      run: |
        echo "🎭 Running end-to-end tests..."
        
        # Function to run E2E tests with Docker Compose
        run_e2e_with_compose() {
          # Check if docker compose or docker-compose is available
          if command -v docker-compose >/dev/null 2>&1; then
            DOCKER_COMPOSE_CMD="docker-compose"
          elif docker compose version >/dev/null 2>&1; then
            DOCKER_COMPOSE_CMD="docker compose"
          else
            echo "❌ Neither docker-compose nor docker compose found"
            return 1
          fi
          
          echo "Using: $DOCKER_COMPOSE_CMD"
          
          # Start services
          echo "🚀 Starting services with Docker Compose..."
          $DOCKER_COMPOSE_CMD -f deployments/docker-compose.yml up -d
          
          # Wait for services to be ready with proper health checks
          echo "⏳ Waiting for services to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health >/dev/null 2>&1; then
              echo "✅ Services are ready!"
              break
            fi
            echo "Attempt $i/30: Services not ready yet, waiting..."
            sleep 2
            if [ $i -eq 30 ]; then
              echo "❌ Services failed to become ready"
              echo "Service logs:"
              $DOCKER_COMPOSE_CMD -f deployments/docker-compose.yml logs
              $DOCKER_COMPOSE_CMD -f deployments/docker-compose.yml down
              return 1
            fi
          done
          
          # Verify services are running
          echo "📋 Service status:"
          $DOCKER_COMPOSE_CMD -f deployments/docker-compose.yml ps
          
          # Run E2E tests
          echo "🧪 Running E2E tests..."
          local test_result=0
          go test -v -tags=e2e ./tests/e2e_test.go || test_result=1
          
          if [ $test_result -eq 0 ]; then
            echo "✅ E2E tests completed successfully"
          else
            echo "❌ E2E tests failed"
            echo "Service logs:"
            $DOCKER_COMPOSE_CMD -f deployments/docker-compose.yml logs
          fi
          
          # Cleanup
          echo "🧹 Cleaning up services..."
          $DOCKER_COMPOSE_CMD -f deployments/docker-compose.yml down
          
          return $test_result
        }
        
        # Function to run E2E tests with local binary (fallback)
        run_e2e_local() {
          echo "⚠️  Running E2E tests against local binary instead of Docker Compose"
          
          # Build local binary
          echo "🔨 Building local binary..."
          mkdir -p bin
          VERSION=$(cat VERSION 2>/dev/null || echo "dev")
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          
          go build \
            -ldflags="-X 'github.com/keyurgolani/DeveloperTools/internal/version.Version=$VERSION' -X 'github.com/keyurgolani/DeveloperTools/internal/version.BuildDate=$BUILD_DATE' -X 'github.com/keyurgolani/DeveloperTools/internal/version.GitCommit=$GIT_COMMIT'" \
            -o bin/server ./cmd/server
          
          # Verify binary works
          ./bin/server --help >/dev/null 2>&1 || (echo "❌ Binary not working" && return 1)
          
          # Run E2E tests in local mode
          echo "🧪 Running E2E tests (local mode)..."
          E2E_TEST_MODE=local go test -v -tags=e2e ./tests/e2e_test.go
        }
        
        # Try Docker Compose first, fallback to local if it fails
        if run_e2e_with_compose; then
          echo "✅ E2E tests completed successfully with Docker Compose"
        else
          echo "⚠️  Docker Compose E2E failed, trying local fallback..."
          if run_e2e_local; then
            echo "✅ E2E tests completed successfully with local fallback"
          else
            echo "❌ Both Docker Compose and local E2E tests failed"
            exit 1
          fi
        fi

  # Performance tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: dev-utilities:perf
        cache-from: type=gha
        load: true
    
    - name: Run performance tests
      run: |
        echo "⚡ Running performance tests..."
        
        # Start container
        echo "🚀 Starting performance test container..."
        docker run -d --name perf-container -p 8080:8080 dev-utilities:perf
        sleep 10
        
        # Verify container is ready
        for i in {1..15}; do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ Performance test container is ready"
            break
          fi
          echo "Waiting for container... ($i/15)"
          sleep 2
          if [ $i -eq 15 ]; then
            echo "❌ Container failed to become ready"
            docker logs perf-container
            docker stop perf-container || true
            exit 1
          fi
        done
        
        # Run performance benchmarks
        echo "🏃 Running performance benchmarks..."
        go test -v -tags=performance -bench=. -benchmem ./tests/performance_test.go
        
        echo "✅ Performance tests completed"
        
        # Cleanup
        docker stop perf-container || true
        docker rm perf-container || true

  # Security tests
  security-test:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: dev-utilities:security
        cache-from: type=gha
        load: true
    
    - name: Run security tests
      run: |
        echo "🔒 Running security tests..."
        
        # Start container
        echo "🚀 Starting security test container..."
        docker run -d --name security-container -p 8080:8080 dev-utilities:security
        sleep 10
        
        # Verify container is ready
        for i in {1..15}; do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ Security test container is ready"
            break
          fi
          echo "Waiting for container... ($i/15)"
          sleep 2
          if [ $i -eq 15 ]; then
            echo "❌ Container failed to become ready"
            docker logs security-container
            docker stop security-container || true
            docker rm security-container || true
            exit 1
          fi
        done
        
        # Run security tests
        echo "🛡️ Running security test suite..."
        go test -v -tags=security ./tests/security_test.go
        
        echo "✅ Security tests completed"
        
        # Cleanup
        docker stop security-container || true
        docker rm security-container || true

  # Build and push Docker image (only on main branch and releases)
  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [pre-commit-checks, lint-and-format, security-scan, test, validate-api, build-docker, e2e-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.event_name == 'release')
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Comprehensive validation (matches local 'make ci' command)
  comprehensive-validation:
    name: Comprehensive Validation
    runs-on: ubuntu-latest
    needs: [pre-commit-checks, lint-and-format, security-scan, test, validate-api, build-docker, e2e-test, security-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Validation Summary
      run: |
        echo "🎉 Comprehensive validation completed successfully!"
        echo ""
        echo "✅ All checks passed:"
        echo "   • Pre-commit validation"
        echo "   • Code formatting and linting"
        echo "   • Security scanning"
        echo "   • Unit tests (78%+ coverage)"
        echo "   • Integration tests"
        echo "   • API validation"
        echo "   • Docker build and testing"
        echo "   • End-to-end tests"
        echo "   • Security tests"
        echo ""
        echo "🚀 Ready for deployment!"

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [comprehensive-validation]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be kubectl commands, Helm charts, etc.

  # Deploy to production (only on releases)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [publish-docker]
    if: github.event_name == 'release'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # This could be kubectl commands, Helm charts, etc.