#!/bin/bash

# sync-version.sh - Synchronize version across all project files
# Usage: ./scripts/sync-version.sh [version]
# If no version is provided, reads from VERSION file

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the project root directory
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_ROOT"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get version from argument or VERSION file
if [ $# -eq 1 ]; then
    NEW_VERSION="$1"
    echo "$NEW_VERSION" > VERSION
    print_status "Updated VERSION file to $NEW_VERSION"
elif [ -f VERSION ]; then
    NEW_VERSION=$(cat VERSION)
    print_status "Using version from VERSION file: $NEW_VERSION"
else
    print_error "No version provided and VERSION file not found"
    echo "Usage: $0 [version]"
    exit 1
fi

# Validate version format (semantic versioning)
if ! echo "$NEW_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
    print_warning "Version '$NEW_VERSION' doesn't follow semantic versioning format"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

print_status "Synchronizing version $NEW_VERSION across all project files..."

# Update OpenAPI specification
if [ -f "api/openapi.yml" ]; then
    sed -i.bak "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+.*/version: $NEW_VERSION/" api/openapi.yml
    rm -f api/openapi.yml.bak
    print_status "Updated api/openapi.yml"
fi

# Update Kubernetes deployment
if [ -f "deployments/k8s-deployment.yaml" ]; then
    sed -i.bak "s/version: v[0-9]\+\.[0-9]\+\.[0-9]\+.*/version: v$NEW_VERSION/" deployments/k8s-deployment.yaml
    rm -f deployments/k8s-deployment.yaml.bak
    print_status "Updated deployments/k8s-deployment.yaml"
fi

# Update Node.js package.json
if [ -f "mcp-bridge/package.json" ]; then
    # Use a more robust approach for JSON
    if command -v jq >/dev/null 2>&1; then
        jq ".version = \"$NEW_VERSION\"" mcp-bridge/package.json > mcp-bridge/package.json.tmp
        mv mcp-bridge/package.json.tmp mcp-bridge/package.json
        print_status "Updated mcp-bridge/package.json using jq"
    else
        sed -i.bak "s/\"version\": \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/\"version\": \"$NEW_VERSION\"/" mcp-bridge/package.json
        rm -f mcp-bridge/package.json.bak
        print_status "Updated mcp-bridge/package.json using sed"
        print_warning "Consider installing jq for more reliable JSON updates"
    fi
fi

# Update MCP bridge JavaScript file
if [ -f "mcp-bridge/mcp-bridge.js" ]; then
    sed -i.bak "s/version: '[0-9]\+\.[0-9]\+\.[0-9]\+'/version: '$NEW_VERSION'/" mcp-bridge/mcp-bridge.js
    rm -f mcp-bridge/mcp-bridge.js.bak
    print_status "Updated mcp-bridge/mcp-bridge.js"
fi

# Update package-lock.json if it exists (this will be regenerated by npm anyway)
if [ -f "mcp-bridge/package-lock.json" ]; then
    print_warning "mcp-bridge/package-lock.json should be regenerated with 'npm install'"
fi

# Update any test files that might have hardcoded versions
find . -name "*.go" -type f -exec grep -l "version.*1\.0\.0\|Version.*1\.0\.0" {} \; | while read -r file; do
    if [[ "$file" != "./internal/version/version.go" ]]; then
        print_warning "Found potential hardcoded version in $file - please review manually"
    fi
done

print_status "Version synchronization complete!"
print_status "Summary of changes:"
echo "  - VERSION file: $NEW_VERSION"
echo "  - api/openapi.yml: version field updated"
echo "  - deployments/k8s-deployment.yaml: version labels updated"
echo "  - mcp-bridge/package.json: version field updated"
echo "  - mcp-bridge/mcp-bridge.js: version field updated"
echo ""
print_status "Next steps:"
echo "  1. Run 'make build' to build with new version"
echo "  2. Run 'cd mcp-bridge && npm install' to update package-lock.json"
echo "  3. Test the application to ensure everything works"
echo "  4. Commit the changes: git add . && git commit -m 'Bump version to $NEW_VERSION'"