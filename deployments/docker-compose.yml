services:
  dev-utilities:
    build:
      context: ..
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - LOG_LEVEL=info
      - AUTH_METHOD=none
      - RATE_LIMIT_STORE=memory
      - GIN_MODE=release
    healthcheck:
      test: ["CMD", "/server", "--health-check"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    networks:
      - dev-utilities-network

  # Redis for rate limiting (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dev-utilities-network

  # Example with Redis rate limiting
  dev-utilities-with-redis:
    build:
      context: ..
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - LOG_LEVEL=info
      - AUTH_METHOD=api_key
      - AUTH_API_KEYS=test-key-1,test-key-2
      - RATE_LIMIT_STORE=redis
      - RATE_LIMIT_REDIS_URL=redis://redis:6379
      - GIN_MODE=release
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/server", "--health-check"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    networks:
      - dev-utilities-network
    profiles:
      - redis-example

volumes:
  redis_data:

networks:
  dev-utilities-network:
    driver: bridge